[build-system]
requires = [ "poetry-core>=1.8.0",]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "coachiq"
version = "0.1.0"
description = "Intelligent RV-C network management system with advanced analytics and control"
authors = ["Ryan Holt <ryan@ryanholt.net>"]
license = "MIT"
readme = "README.md"
keywords = ["can", "rv-c", "websocket", "fastapi"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux"
]
include = [
    "backend/**/*",
    "frontend/dist/**/*",
    "config/**/*"
]
homepage = "https://github.com/carpenike/coachiq"
repository = "https://github.com/carpenike/coachiq"

[[tool.poetry.packages]]
include = "backend"

# ------------------------------------------------------------------
# Runtime dependencies + Python version (required by Poetry solver)
# ------------------------------------------------------------------
[tool.poetry.dependencies]
python            = ">=3.12,<4.0"
fastapi           = ">=0.115"
uvicorn           = { version = ">=0.34", extras = ["standard"] }
python-can        = ">=4.0"
pydantic          = ">=2.9"
pyyaml            = ">=6.0"
prometheus_client = ">=0.21.0"
coloredlogs       = ">=15.0"
pyroute2          = { version = ">=0.7.10,<0.9.0" }
psutil            = ">=6.0.0"
langchain-community = ">=0.3"
# Notification system dependencies
apprise           = ">=1.8.0"
jinja2            = ">=3.1.0"
# Authentication system dependencies
pyjwt             = ">=2.8.0"
passlib           = { version = ">=1.7.4", extras = ["bcrypt"] }
python-multipart  = ">=0.0.9"
# CAN utilities dependencies
cantools          = ">=39.0.0"
numpy             = ">=1.24.0"
pyotp             = ">=2.9.0"
qrcode            = { version = ">=8.0", extras = ["pil"] }
# Database abstraction layer
sqlalchemy        = { version = ">=2.0", extras = ["asyncio"] }
aiosqlite         = ">=0.19.0"
asyncpg           = ">=0.29.0"
alembic           = ">=1.13.0"

# ------------------------------------------------------------------
# CLI entry-points (was in the deleted [project] section)
# ------------------------------------------------------------------
email-validator = "^2.2.0"
slowapi = "^0.1.9"
cachetools = "^5.3.0"
[tool.poetry.scripts]
coachiq-daemon = "backend.cli:main"
coachiq-validate-config = "backend.core.config:validate_config_cli"

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.pyright]
include = [ "backend", "src/common"]
exclude = [ "**/node_modules", "**/__pycache__", ".venv", "_deprecated"]
# Enhanced type checking for safety-critical system
typeCheckingMode = "strict"
reportMissingImports = "error"
reportMissingTypeStubs = false
reportUnusedImport = "error"
reportUnusedVariable = "error"
reportUnnecessaryTypeAssertion = "error"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportConstantRedefinition = "error"
reportDuplicateImport = "error"
reportIncompleteStub = "warning"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "error"
reportUninitializedInstanceVariable = "warning"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "warning"
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "warning"
reportUntypedNamedTuple = "warning"
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportPrivateImportUsage = "error"
reportWildcardImportFromLibrary = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "warning"
reportMatchNotExhaustive = "error"
reportImplicitOverride = "warning"
pythonVersion = "3.12"
# Enable strict mode but allow some flexibility for CAN data processing
reportArgumentType = "warning"  # CAN data often needs type flexibility
reportGeneralTypeIssues = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
stubPath = "typings"
# Strict analysis for safety-critical paths
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true

[tool.pytest.ini_options]
pythonpath = [ "backend", "src"]
addopts = [ "--import-mode=importlib"]
testpaths = [ "tests"]

[tool.ruff.format]
line-ending = "lf"
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
# Safety-critical rules for RV-C CAN bus system
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear (catches subtle bugs)
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warnings
    "N",      # pep8-naming
    "C90",    # mccabe complexity
    "RUF",    # ruff-specific rules
    "PT",     # flake8-pytest-style (testing best practices)
    "ERA",    # eradicate (remove dead code)
    "S",      # bandit security rules
    "PL",     # pylint rules (subset for safety)
    "A",      # flake8-builtins (shadowing built-ins)
    "DTZ",    # flake8-datetimez (timezone safety)
    "EM",     # flake8-errmsg (proper error messages)
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420 (explicit __init__.py)
    "PIE",    # flake8-pie (misc improvements)
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise (proper exception raising)
    "RET",    # flake8-return (return statement improvements)
    "SLF",    # flake8-self (private member access)
    "SLOT",   # flake8-slots (performance)
    "T20",    # flake8-print (no print statements)
    "ICN",    # flake8-import-conventions
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "FIX",    # flake8-fixme (no TODO/FIXME in production)
    "ERA",    # eradicate (remove commented code)
    "PD",     # pandas-vet (if using pandas)
    "PGH",    # pygrep-hooks
    "FLY",    # flynt (f-string conversion)
    "PERF",   # perflint (performance anti-patterns)
    "FURB",   # refurb (modernization)
    "LOG",    # flake8-logging
]
# Force explicit per-line suppressions for safety-critical code
ignore = []
# Allow auto-fixing for safe rules only
unfixable = [
    "F401",   # unused-import (require manual review)
    "F841",   # unused-variable (require manual review)
    "ERA001", # commented-out-code (require manual review)
    "T201",   # print statements (require manual review)
    "T203",   # pprint statements (require manual review)
    "S101",   # assert statements (may be needed for safety checks)
]
exclude = [ ".git", "__pycache__", ".venv", "build", "dist", "*.egg-info", "_deprecated"]

[tool.ruff.lint.isort]
known-first-party = [ "common", "backend"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Test files - allow longer lines and specific testing patterns
"tests/**/*.py" = [
    "E501",     # line too long (acceptable in tests)
    "S101",     # assert statements (required for testing)
    "S106",     # hardcoded password (test fixtures)
    "ARG001",   # unused function argument (pytest fixtures)
    "PLR0913",  # too many arguments (test functions)
    "PT001",    # use pytest.fixture() - legacy fixtures acceptable
]
"**/tests/**/*.py" = [
    "E501",     # line too long (acceptable in tests)
    "S101",     # assert statements (required for testing)
    "S106",     # hardcoded password (test fixtures)
    "ARG001",   # unused function argument (pytest fixtures)
    "PLR0913",  # too many arguments (test functions)
    "PT001",    # use pytest.fixture() - legacy fixtures acceptable
]
# Type stubs - special naming conventions allowed
"typings/fastapi/__init__.py" = [ "N802", "N818", "A003", "A001"]
"typings/fastapi/__init__.pyi" = [ "N802", "N818", "A003", "A001"]
"typings/fastapi/params.py" = [ "N802", "A003"]
"typings/fastapi/params.pyi" = [ "N802", "A003"]
"typings/**/*.py" = [ "TID252", "A003", "A001", "N801", "N802", "N803", "N806"]
"typings/**/*.pyi" = [ "TID252", "A003", "A001", "N801", "N802", "N803", "N806"]
# Main entry point - allow print statements for startup messages
"backend/main.py" = [ "T201" ]
"run_server.py" = [ "T201" ]
# Development tools - more lenient rules
"dev_tools/**/*.py" = [ "T201", "T203", "S101", "PLR0913"]
"scripts/**/*.py" = [ "T201", "T203", "S101", "PLR0913"]
# Configuration files - allow broader imports
"backend/core/config.py" = [ "TCH002", "TCH003" ]
# Legacy deprecated code - minimal enforcement
"_deprecated/**/*.py" = [ "ALL" ]
# Development and database files - allow commented code for examples
"backend/alembic/**/*.py" = [ "ERA001", "T201" ]
"backend/integrations/*/tests/**/*.py" = [ "ERA001" ]
# Configuration and logging - allow commented examples
"backend/core/logging_config.py" = [ "ERA001" ]
# Service files - allow silent exception handling for stability
"backend/services/can_service.py" = [ "S110" ]
"backend/services/database_engine.py" = [ "S110" ]
"backend/websocket/handlers.py" = [ "S110" ]
# Router files - allow commented code for examples
"backend/api/routers/**/*.py" = [ "ERA001" ]
"backend/integrations/**/*.py" = [ "ERA001", "S110" ]
"backend/services/**/*service.py" = [ "ERA001" ]

[tool.poetry.group.dev.dependencies]
pytest = "==8.4.0"
pytest-mock = "==3.14.1"
mypy = "==1.16.0"
ruff = "0.11.13"
black = "==25.1.0"
pre-commit = "==4.2.0"
types-PyYAML = "==6.0.12.20250516"
httpx = "==0.28.1"
djlint = "==1.36.4"
pytest-asyncio = "==1.0.0"
mkdocs = ">=1.6.1"
mkdocs-material = ">=9.6.14"
mkdocstrings = ">=0.29.1"
mkdocstrings-python = ">=1.16.10"
mkdocs-swagger-ui-tag = ">=0.7.1"
mike = "==2.1.3"
mkdocs-autorefs = ">=1.4.1"
mkdocs-mermaid2-plugin = ">=1.2.1"
setuptools = "==80.9.0"
openai = "==1.85.0"
langchain-openai = "==0.3.21"
pyyaml = "6.0.2"
run-in-subdirectory = "1.0.1"
pyright = "1.1.401"
toml = "0.10.2"
deptry = {version = "0.23.0", python = ">=3.9"}
pytest-cov = {version = "6.1.1", python = ">=3.9"}
bandit = {version = "1.8.3", extras = ["toml"], python = ">=3.9"}
pip-audit = "2.9.0"

# Bandit security linting configuration
[tool.bandit]
# Paths to scan
exclude_dirs = ["tests", "_deprecated", "typings"]
# Skip specific tests for CAN bus and real-time systems
skips = ["B101"]  # Allow assert statements in production for safety checks

[tool.poetry.group.devtools.dependencies]
pymupdf = {version = "==1.23.26", python = ">=3.8"}
faiss-cpu = ">=1.7.4"
